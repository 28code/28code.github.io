<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>28code</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://28code.com/"/>
  <updated>2019-03-08T03:20:20.000Z</updated>
  <id>http://28code.com/</id>
  
  <author>
    <name>28code</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>5分钟带你体验kubernetes 对外提供访问</title>
    <link href="http://28code.com/2019/03/08/kubernetes_nodeport/"/>
    <id>http://28code.com/2019/03/08/kubernetes_nodeport/</id>
    <published>2019-03-08T03:20:20.000Z</published>
    <updated>2019-03-08T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。</p><p>上一篇文章介绍了kubernetes kubernetes RollingUpdate滚动升级镜像回滚，这一篇文章带你来 5分钟带你体验kubernetes 对外提供访问 </p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本文是之前环境的延续。</p><h3 id="kubernetes-对外提供访问"><a href="#kubernetes-对外提供访问" class="headerlink" title="kubernetes 对外提供访问"></a>kubernetes 对外提供访问</h3><p>在master我们执行命令查看pod<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-8nz5g   1/1     Running   0          91s   10.244.1.30   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-jms4x   1/1     Running   0          92s   10.244.1.29   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-l7q6v   1/1     Running   0          89s   10.244.2.34   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>在master我们执行命令查看service<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看 service</span><br><span class="line"># kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   72m</span><br><span class="line">myapp        ClusterIP   10.100.210.72   &lt;none&gt;        80/TCP    17m</span><br></pre></td></tr></table></figure></p><p>我们想要访问pod，目前只能在虚拟机的节点上访问，10.244.XXX.XXX的网址或者通过service服务的ip访问，<br>如果我们想要在虚拟机之外访问集群内部的地址，这个时候我们需要执行命令修改service的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">master上执行命令</span><br><span class="line"># kubectl edit svc myapp</span><br></pre></td></tr></table></figure><p>得到如下信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Please edit the object below. Lines beginning with a &apos;#&apos; will be ignored,</span><br><span class="line"># and an empty file will abort the edit. If an error occurs while saving this file will be</span><br><span class="line"># reopened with the relevant failures.</span><br><span class="line">#</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2019-03-07T05:53:57Z&quot;</span><br><span class="line">  labels:</span><br><span class="line">    run: myapp</span><br><span class="line">  name: myapp</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: &quot;5195&quot;</span><br><span class="line">  selfLink: /api/v1/namespaces/default/services/myapp</span><br><span class="line">  uid: 38910862-4942-11e9-bbc4-000c296cc22a</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.100.210.72</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    run: myapp</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: ClusterIP</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>找到  type: ClusterIP  修改为 type: NodePort<br>修改后结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Please edit the object below. Lines beginning with a &apos;#&apos; will be ignored,</span><br><span class="line"># and an empty file will abort the edit. If an error occurs while saving this file will be</span><br><span class="line"># reopened with the relevant failures.</span><br><span class="line">#</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2019-03-18T05:53:57Z&quot;</span><br><span class="line">  labels:</span><br><span class="line">    run: myapp</span><br><span class="line">  name: myapp</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: &quot;5195&quot;</span><br><span class="line">  selfLink: /api/v1/namespaces/default/services/myapp</span><br><span class="line">  uid: 38910862-4942-11e9-bbc4-000c296cc22a</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.100.210.72</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    run: myapp</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: NodePort</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br></pre></td></tr></table></figure><p>保存退出<br>再次查看service<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        4h14m</span><br><span class="line">myapp        NodePort    10.100.210.72   &lt;none&gt;        80:32313/TCP   3h19m</span><br></pre></td></tr></table></figure></p><p>发现myapp service的prot变为 80:32313/TCP，32313为master主机对外访问的端口号。<br>master的ip为 192.168.110.140，此时我们想要在虚拟机外部访问集群内部pod，需要使用 <strong> <a href="http://192.168.110.140:32313" target="_blank" rel="noopener">http://192.168.110.140:32313</a> </strong>。<br>在master节点上执行命令查看效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># curl http://192.168.110.140:32313</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-l7q6v</span><br><span class="line"># curl http://192.168.110.140:32313</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-jms4x</span><br><span class="line"># curl http://192.168.110.140:32313</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-8nz5g</span><br><span class="line"># curl http://192.168.110.140:32313</span><br></pre></td></tr></table></figure></p><p>同时我在虚拟机的外部机器上访问 <strong> <a href="http://192.168.110.140:32313" target="_blank" rel="noopener">http://192.168.110.140:32313</a> </strong> </p><p><img src="/images/post/20190307_01.jpg" alt></p><p>以上是kubernetes 对外提供访问 整个过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。&lt;/p&gt;
&lt;p&gt;上一篇文章介绍了kubernetes kubernetes RollingUpdate滚动升级镜像回滚，这一篇文章带你来 5分钟带你体验kubernetes 对外提供访问 &lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://28code.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://28code.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://28code.com/tags/kubernetes/"/>
    
      <category term="k8s" scheme="http://28code.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>5分钟带你体验kubernetes RollingUpdate滚动升级镜像回滚</title>
    <link href="http://28code.com/2019/03/07/kubernetes_rub/"/>
    <id>http://28code.com/2019/03/07/kubernetes_rub/</id>
    <published>2019-03-07T03:20:20.000Z</published>
    <updated>2019-03-07T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。</p><p>上一篇文章介绍了kubernetes RollingUpdate 滚动升级，这一篇文章带你来 5分钟带你体验kubernetes RollingUpdate滚动升级镜像回滚 </p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本文中我用到了docker的两个镜像文件 28code/httpd:v1.0 和   28code/httpd:v2.0  ，系作者基于docker的busybox镜像做的一个docker image，主要功能是提供httpd服务并显示版本和pod信息。<br>启动28code/httpd:v1.0镜像时候会生成文件位于 /var/www/index.html，index.html记录了版本号V1和启动pod时候的pod名称,<br>启动28code/httpd:v2.0镜像时候会生成文件位于 /var/www/index.html，index.html记录了版本号V2和启动pod时候的pod名称，<br>以上主要用来提供展示版本变更和访问时候显示访问的哪个pod的显示效果。</p><h3 id="kubernetes-RollingUpdate-滚动升级镜像回滚"><a href="#kubernetes-RollingUpdate-滚动升级镜像回滚" class="headerlink" title="kubernetes RollingUpdate 滚动升级镜像回滚"></a>kubernetes RollingUpdate 滚动升级镜像回滚</h3><p>上次在master执行命令，部署docker镜像文件28code/httpd:v2.0，，镜像提供httpd服务，为3个服务。</p><p>查看pod运行情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  kubectl get pods -o wide</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-6fd9d6f87-54xqz   1/1     Running   0          49s   10.244.1.28   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-6fd9d6f87-7grz9   1/1     Running   0          53s   10.244.2.32   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-6fd9d6f87-s4sqw   1/1     Running   0          51s   10.244.2.33   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>在master节点上执行访问3个pod，看到返回信息都是V2版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.244.1.28</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-54xqz</span><br><span class="line"># curl 10.244.2.32</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-7grz9</span><br><span class="line"># curl 10.244.2.33</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-s4sqw</span><br></pre></td></tr></table></figure></p><p>现在我们回退到V1版本，我们执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl rollout undo deployment myapp</span><br><span class="line">deployment.extensions/myapp rolled back</span><br></pre></td></tr></table></figure></p><p>master节点上查看pod信息，看到pod正在回滚<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#  kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS        RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-6fd9d6f87-54xqz    1/1     Terminating   0          21m   10.244.1.28   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-6fd9d6f87-7grz9    1/1     Terminating   0          21m   10.244.2.32   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-6fd9d6f87-s4sqw    1/1     Terminating   0          21m   10.244.2.33   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-8nz5g   1/1     Running       0          21s   10.244.1.30   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-jms4x   1/1     Running       0          22s   10.244.1.29   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-l7q6v   1/1     Running       0          19s   10.244.2.34   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>再次master节点上查看pod信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-8nz5g   1/1     Running   0          91s   10.244.1.30   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-jms4x   1/1     Running   0          92s   10.244.1.29   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-l7q6v   1/1     Running   0          89s   10.244.2.34   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>在master节点上执行访问3个pod，看到返回信息都是V1版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.244.1.30</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-8nz5g</span><br><span class="line"># curl 10.244.1.29</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-jms4x</span><br><span class="line"># curl 10.244.2.34</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-l7q6v</span><br></pre></td></tr></table></figure></p><p>此时我们来测试kubernetes LB功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看 service</span><br><span class="line"># kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   72m</span><br><span class="line">myapp        ClusterIP   10.100.210.72   &lt;none&gt;        80/TCP    17m</span><br></pre></td></tr></table></figure></p><p>在master节点执行命令展示LB的效果，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-jms4x</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-8nz5g</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-l7q6v</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-jms4x</span><br></pre></td></tr></table></figure></p><p>可以看到访问服务地址10.100.210.72后，分别均匀的访问到3个pod上的httpd服务，版本已经回退变成V1版本。</p><p>以上是kubernetes RollingUpdate 滚动升级 整个过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。&lt;/p&gt;
&lt;p&gt;上一篇文章介绍了kubernetes RollingUpdate 滚动升级，这一篇文章带你来 5分钟带你体验kubernetes RollingUpdate滚动升级镜像回滚 &lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://28code.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://28code.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://28code.com/tags/kubernetes/"/>
    
      <category term="k8s" scheme="http://28code.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>5分钟带你体验kubernetes RollingUpdate 滚动升级</title>
    <link href="http://28code.com/2019/03/06/kubernetes_ru/"/>
    <id>http://28code.com/2019/03/06/kubernetes_ru/</id>
    <published>2019-03-06T03:20:20.000Z</published>
    <updated>2019-03-06T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。</p><p>上一篇文章介绍了kubernetes HA(High Available)高可用集群，这一篇文章带你来 5分钟带你体验kubernetes RollingUpdate 滚动升级</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本文中我用到了docker的两个镜像文件 28code/httpd:v1.0 和   28code/httpd:v2.0  ，系作者基于docker的busybox镜像做的一个docker image，主要功能是提供httpd服务并显示版本和pod信息。<br>启动28code/httpd:v1.0镜像时候会生成文件位于 /var/www/index.html，index.html记录了版本号V1和启动pod时候的pod名称,<br>启动28code/httpd:v2.0镜像时候会生成文件位于 /var/www/index.html，index.html记录了版本号V2和启动pod时候的pod名称，<br>以上主要用来提供展示版本变更和访问时候显示访问的哪个pod的显示效果。</p><h3 id="kubernetes-RollingUpdate-滚动升级"><a href="#kubernetes-RollingUpdate-滚动升级" class="headerlink" title="kubernetes RollingUpdate 滚动升级"></a>kubernetes RollingUpdate 滚动升级</h3><p>上次在master执行命令，部署docker镜像文件28code/httpd:v1.0，，镜像提供httpd服务，为3个服务。<br>上次我们把node02节点关闭后，这次把node02节点启动起来，并且执行命令启动node02节点上的kubelet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node02 ~]# systemctl start kubelet</span><br></pre></td></tr></table></figure><p>在master上执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看目前集群pod运行情况</span><br><span class="line"># kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6697m   1/1     Running   0          47m     10.244.1.25   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-9cq9p   1/1     Running   0          7m29s   10.244.1.27   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running   0          142m    10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>在master节点分别访问3个pod节点查看httpd服务信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.244.1.25</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6697m</span><br><span class="line"># curl 10.244.1.27</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-9cq9p</span><br><span class="line"># curl 10.244.1.24</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br></pre></td></tr></table></figure></p><p>可以看到3个pod节点正常访问（V1代表版本信息，myapp-XXXXXX 是代表pods名称），显示了版本号和pod名称。我们所有pod都运行了28code/httpd:v1.0的image，<br>现在我需要把pod都升级到28code/httpd:v2.0，我们在master节点执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl set image deployment myapp  myapp=28code/httpd:v2.0</span><br><span class="line">deployment.extensions/myapp image updated</span><br></pre></td></tr></table></figure></p><p>再次查看pod运行情况，和上边信息对比发现pod已经都变成新的pod，并且之前都运行在node01上的3个pod，现在已经变成1个pod运行在node01上，2个pod运行在node02上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  kubectl get pods -o wide</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-6fd9d6f87-54xqz   1/1     Running   0          49s   10.244.1.28   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-6fd9d6f87-7grz9   1/1     Running   0          53s   10.244.2.32   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-6fd9d6f87-s4sqw   1/1     Running   0          51s   10.244.2.33   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>在master节点上执行访问3个pod，看到返回信息已经是V2版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.244.1.28</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-54xqz</span><br><span class="line"># curl 10.244.2.32</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-7grz9</span><br><span class="line"># curl 10.244.2.33</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-s4sqw</span><br></pre></td></tr></table></figure></p><p>此时我们来测试kubernetes LB功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看 service</span><br><span class="line"># kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   72m</span><br><span class="line">myapp        ClusterIP   10.100.210.72   &lt;none&gt;        80/TCP    17m</span><br></pre></td></tr></table></figure></p><p>在master节点执行命令展示LB的效果，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.100.210.72</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-7grz9</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-s4sqw</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-54xqz</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V2</span><br><span class="line">myapp-6fd9d6f87-s4sqw</span><br></pre></td></tr></table></figure></p><p>可以看到访问服务地址10.100.210.72后，分别均匀的访问到3个pod上的httpd服务，版本已经变成V2版本。</p><p>以上是kubernetes RollingUpdate 滚动升级 整个过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。&lt;/p&gt;
&lt;p&gt;上一篇文章介绍了kubernetes HA(High Available)高可用集群，这一篇文章带你来 5分钟带你体验kubernetes RollingUpdate 滚动升级&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://28code.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://28code.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://28code.com/tags/kubernetes/"/>
    
      <category term="k8s" scheme="http://28code.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>5分钟带你体验kubernetes HA(High Available)高可用集群</title>
    <link href="http://28code.com/2019/03/05/kubernetes_ha/"/>
    <id>http://28code.com/2019/03/05/kubernetes_ha/</id>
    <published>2019-03-05T03:20:20.000Z</published>
    <updated>2019-03-05T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。</p><p>上一篇文章介绍了kubernetes集群伸缩功能，这一篇文件带你来  5分钟带你体验kubernetes HA(High Available)高可用集群</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本文中我用到了docker的的镜像文件 28code/httpd:v1.0 ，系作者基于docker的busybox镜像做的一个docker image，主要功能是提供httpd服务并显示版本和pod信息。 启动28code/httpd:v1.0镜像时候会生成文件位于 /var/www/index.html，index.html记录了版本号V1和启动pod时候的pod名称，用来提供展示版本变更和访问时候显示访问的哪个pod的显示效果。</p><h3 id="kubernetes-HA-High-Available-高可用集群"><a href="#kubernetes-HA-High-Available-高可用集群" class="headerlink" title="kubernetes HA(High Available)高可用集群"></a>kubernetes HA(High Available)高可用集群</h3><p>上次在master执行命令，部署docker镜像文件28code/httpd:v1.0，，镜像提供httpd服务，为3个服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看目前集群pod运行情况</span><br><span class="line"># kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE    IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6697m   1/1     Running   0          18m    10.244.1.25   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-6tqkk   1/1     Running   0          113m   10.244.2.30   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running   0          113m   10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>可以看到3个pod有2个pod运行在node01节点上有1个pod运行在node02节点上。<br>此时我们让node02断电，看看会发生什么。<br>在node02节点上我们执行命令，让 node02 关机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node02 ~]# init 0</span><br></pre></td></tr></table></figure></p><p>在master上检查node的情况，发现node02状态已经发生变化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get nodes</span><br><span class="line">NAME             STATUS     ROLES    AGE    VERSION</span><br><span class="line">master.k8s.com   Ready      master   3h3m   v1.13.4</span><br><span class="line">node01.k8s.com   Ready      &lt;none&gt;   176m   v1.13.4</span><br><span class="line">node02.k8s.com   NotReady   &lt;none&gt;   174m   v1.13.4</span><br></pre></td></tr></table></figure></p><p>在master上检查pod的情况（需要等待一段时间），发现运行在node02节点上pod已经被结束，运行的总pod还是3个，都运行在了node01上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS        RESTARTS   AGE    IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6697m   1/1     Running       0          40m    10.244.1.25   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-6tqkk   1/1     Terminating   0          135m   10.244.2.30   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-9cq9p   1/1     Running       0          9s     10.244.1.27   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running       0          135m   10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>再等待一段时间后，检测pod状态，发现只剩下3个pod，都运行在了node01上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6697m   1/1     Running   0          47m     10.244.1.25   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-9cq9p   1/1     Running   0          7m29s   10.244.1.27   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running   0          142m    10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>在master节点分别访问3个pod节点查看httpd服务信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.244.1.25</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6697m</span><br><span class="line"># curl 10.244.1.27</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-9cq9p</span><br><span class="line"># curl 10.244.1.24</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br></pre></td></tr></table></figure></p><p>可以看到3个pod节点正常访问（V1代表版本信息，myapp-XXXXXX 是代表pods名称），显示了版本号和pod名称。</p><p>此时我们来测试kubernetes LB功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看 service</span><br><span class="line"># kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   72m</span><br><span class="line">myapp        ClusterIP   10.100.210.72   &lt;none&gt;        80/TCP    17m</span><br></pre></td></tr></table></figure></p><p>在master节点执行命令展示LB的效果，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6697m</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-9cq9p</span><br></pre></td></tr></table></figure></p><p>可以看到访问服务地址10.100.210.72后，分别均匀的访问到3个pod上的httpd服务</p><p>以上是kubernetes HA(High Available)高可用集群整个过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。&lt;/p&gt;
&lt;p&gt;上一篇文章介绍了kubernetes集群伸缩功能，这一篇文件带你来  5分钟带你体验kubernetes HA(High Available)高可用集群&lt;/p&gt;
&lt;h3 id=&quot;环境准备&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://28code.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://28code.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://28code.com/tags/kubernetes/"/>
    
      <category term="k8s" scheme="http://28code.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>5分钟带你体验kubernetes集群伸缩功能</title>
    <link href="http://28code.com/2019/03/04/kubernetes_rc2/"/>
    <id>http://28code.com/2019/03/04/kubernetes_rc2/</id>
    <published>2019-03-04T03:20:20.000Z</published>
    <updated>2019-03-04T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。</p><p>上一篇文章介绍了kubernetes集群扩展功能，这一篇文件带你来 5分钟带你体验kubernetes集群伸缩功能</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本文中我用到了docker的的镜像文件 28code/httpd:v1.0 ，系作者基于docker的busybox镜像做的一个docker image，主要功能是提供httpd服务并显示版本和pod信息。 启动28code/httpd:v1.0镜像时候会生成文件位于 /var/www/index.html，index.html记录了版本号V1和启动pod时候的pod名称，用来提供展示版本变更和访问时候显示访问的哪个pod的显示效果。</p><h3 id="kubernetes-集群伸缩"><a href="#kubernetes-集群伸缩" class="headerlink" title="kubernetes 集群伸缩"></a>kubernetes 集群伸缩</h3><p>上次在master执行命令，部署docker镜像文件28code/httpd:v1.0，，镜像提供httpd服务，扩展为5个服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">扩展命令为</span><br><span class="line"># kubectl scale --replicas=5 deployment myapp</span><br><span class="line">deployment.extensions/myapp scaled</span><br><span class="line"></span><br><span class="line">查看pod运行情况</span><br><span class="line"># kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6697m   1/1     Running   0          57s   10.244.1.25   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-6tqkk   1/1     Running   0          96m   10.244.2.30   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-kfqpw   1/1     Running   0          57s   10.244.1.26   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running   0          96m   10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-xxxb9   1/1     Running   0          57s   10.244.2.31   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>可以看到kubernetes现在有5个pod提供httpd服务。<br>如果我们现在想要伸缩，只需要3个pod提供httpd服务，只需执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># kubectl scale --replicas=3 deployment myapp</span><br><span class="line">deployment.extensions/myapp scaled</span><br><span class="line"></span><br><span class="line">查看pod运行情况</span><br><span class="line"># kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS        RESTARTS   AGE    IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6697m   1/1     Running       0          17m    10.244.1.25   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-6tqkk   1/1     Running       0          113m   10.244.2.30   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-kfqpw   0/1     Terminating   0          17m    10.244.1.26   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running       0          113m   10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-xxxb9   0/1     Terminating   0          17m    10.244.2.31   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">可以看到kubernetes结束了2个pod，等候几秒再次查看pod运行情况，pod已经变成3个</span><br><span class="line"># kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE    IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6697m   1/1     Running   0          18m    10.244.1.25   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-6tqkk   1/1     Running   0          113m   10.244.2.30   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running   0          113m   10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>在master节点分别访问3个pod节点查看httpd服务信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.244.1.25</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6697m</span><br><span class="line"># curl 10.244.2.30</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br><span class="line"># curl 10.244.1.24</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br></pre></td></tr></table></figure></p><p>可以看到3个pod节点正常访问（V1代表版本信息，myapp-XXXXXX 是代表pods名称），显示了版本号和pod名称。</p><p>此时我们来测试kubernetes LB功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看 service</span><br><span class="line"># kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   72m</span><br><span class="line">myapp        ClusterIP   10.100.210.72   &lt;none&gt;        80/TCP    17m</span><br></pre></td></tr></table></figure></p><p>在master节点执行命令展示LB的效果，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6697m</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6697m</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br></pre></td></tr></table></figure></p><p>可以看到访问服务地址10.100.210.72后，分别均匀的访问到3个pod上的httpd服务</p><p>以上是体验kubernetes集群伸缩功能整个过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。&lt;/p&gt;
&lt;p&gt;上一篇文章介绍了kubernetes集群扩展功能，这一篇文件带你来 5分钟带你体验kubernetes集群伸缩功能&lt;/p&gt;
&lt;h3 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; clas
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://28code.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://28code.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://28code.com/tags/kubernetes/"/>
    
      <category term="k8s" scheme="http://28code.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>5分钟带你体验kubernetes集群扩展功能</title>
    <link href="http://28code.com/2019/03/03/kubernetes_rc/"/>
    <id>http://28code.com/2019/03/03/kubernetes_rc/</id>
    <published>2019-03-03T03:20:20.000Z</published>
    <updated>2019-03-03T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。</p><p>上一篇文章介绍了kubernetes LB(Load Balancing)负载均衡集群，这一篇文件带你来 5分钟带你体验kubernetes集群扩展功能</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本文中我用到了docker的的镜像文件 28code/httpd:v1.0 ，系作者基于docker的busybox镜像做的一个docker image，主要功能是提供httpd服务并显示版本和pod信息。 启动28code/httpd:v1.0镜像时候会生成文件位于 /var/www/index.html，index.html记录了版本号V1和启动pod时候的pod名称，用来提供展示版本变更和访问时候显示访问的哪个pod的显示效果。</p><h3 id="kubernetes-集群扩展"><a href="#kubernetes-集群扩展" class="headerlink" title="kubernetes 集群扩展"></a>kubernetes 集群扩展</h3><p>上次在master执行命令，部署docker镜像文件28code/httpd:v1.0，，镜像提供httpd服务，部署为2个服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl run myapp --image=28code/httpd:v1.0 --replicas=2</span><br></pre></td></tr></table></figure></p><p>在master节点执行命令，查看pod的运行情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6tqkk   1/1     Running   0          22s   10.244.2.30   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running   0          22s   10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">在master节点执行命令，查看deployment</span><br><span class="line"># kubectl get deployment</span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">myapp   2/2     2            2           5m57s</span><br></pre></td></tr></table></figure></p><p>可以看到httpd服务启动了两个分别运行在node01节点上和node02节点上。</p><p>此时如果我们想要运行5个httpd服务，此时我们只需要在在master节点执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># kubectl scale --replicas=5 deployment myapp</span><br><span class="line">deployment.extensions/myapp scaled</span><br><span class="line"></span><br><span class="line">执行命令后，再次查看pod运行情况</span><br><span class="line"># kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6697m   1/1     Running   0          57s   10.244.1.25   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-6tqkk   1/1     Running   0          96m   10.244.2.30   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-kfqpw   1/1     Running   0          57s   10.244.1.26   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running   0          96m   10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-xxxb9   1/1     Running   0          57s   10.244.2.31   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>可以看到kubernetes扩展了3个pod提供httpd服务。</p><p>在master节点分别访问5个pod节点查看httpd服务信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.244.1.25</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6697m</span><br><span class="line"># curl 10.244.2.30</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br><span class="line"># curl 10.244.1.26</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-kfqpw</span><br><span class="line"># curl 10.244.1.24</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line"># curl 10.244.2.31</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-xxxb9</span><br></pre></td></tr></table></figure></p><p>可以看到5个pod节点正常访问（V1代表版本信息，myapp-XXXXXX 是代表pods名称），显示了版本号和pod名称。</p><p>此时我们来测试kubernetes LB功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看 service</span><br><span class="line"># kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   72m</span><br><span class="line">myapp        ClusterIP   10.100.210.72   &lt;none&gt;        80/TCP    17m</span><br></pre></td></tr></table></figure></p><p>在master节点执行命令展示LB的效果，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-kfqpw</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6697m</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6697m</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-xxxb9</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line"># curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-xxxb9</span><br><span class="line">#</span><br></pre></td></tr></table></figure></p><p>可以看到访问服务地址10.100.210.72后，分别均匀的访问到5个pod上的httpd服务</p><p>以上是体验kubernetes集群扩展功能整个过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。&lt;/p&gt;
&lt;p&gt;上一篇文章介绍了kubernetes LB(Load Balancing)负载均衡集群，这一篇文件带你来 5分钟带你体验kubernetes集群扩展功能&lt;/p&gt;
&lt;h3 id=&quot;环境准备&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://28code.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://28code.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://28code.com/tags/kubernetes/"/>
    
      <category term="k8s" scheme="http://28code.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>5分钟带你体验kubernetes LB(Load Balancing)负载均衡集群</title>
    <link href="http://28code.com/2019/03/02/kubernetes_lb/"/>
    <id>http://28code.com/2019/03/02/kubernetes_lb/</id>
    <published>2019-03-02T03:20:20.000Z</published>
    <updated>2019-03-02T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。</p><p>上一篇文章介绍了kubernetes 13.3.4 安装过程，这一篇文件带你来5分钟带你体验kubernetes LB(Load Balancing)负载均衡集群</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本文中我用到了docker的的镜像文件 28code/httpd:v1.0 ，系作者基于docker的busybox镜像做的一个docker image，主要功能是提供httpd服务并显示版本和pod信息。 启动28code/httpd:v1.0镜像时候会生成文件位于 /var/www/index.html，index.html记录了版本号V1和启动pod时候的pod名称，用来提供展示版本变更和访问时候显示访问的哪个pod的显示效果。</p><h3 id="kubernetes-LB负载均衡集群实验"><a href="#kubernetes-LB负载均衡集群实验" class="headerlink" title="kubernetes LB负载均衡集群实验"></a>kubernetes LB负载均衡集群实验</h3><p>在master执行命令，部署docker镜像文件28code/httpd:v1.0，，镜像提供httpd服务，部署为2个服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl run myapp --image=28code/httpd:v1.0 --replicas=2</span><br></pre></td></tr></table></figure></p><p>在master节点执行命令，查看pod的运行情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-799bbcd6b4-6tqkk   1/1     Running   0          22s   10.244.2.30   node02.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-799bbcd6b4-p4dxz   1/1     Running   0          22s   10.244.1.24   node01.k8s.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">在master节点执行命令，查看deployment</span><br><span class="line"># kubectl get deployment</span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">myapp   2/2     2            2           5m57s</span><br></pre></td></tr></table></figure></p><p>可以看到httpd服务启动了两个分别运行在node01节点上和node02节点上，</p><p>在master节点分别访问两个pod节点查看httpd服务信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># curl 10.244.2.30</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br><span class="line"># curl 10.244.1.24</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br></pre></td></tr></table></figure></p><p>可以看到两个pod节点正常访问（V1代表版本信息，myapp-XXXXXX 是代表pods名称），显示了版本号和pod名称。</p><p>此时我们来测试kubernetes LB功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在master节点执行命令，创建service实现LB访问httpd服务</span><br><span class="line"># kubectl  expose deployment myapp --name=myapp --port=80</span><br><span class="line">查看 service</span><br><span class="line"># kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   72m</span><br><span class="line">myapp        ClusterIP   10.100.210.72   &lt;none&gt;        80/TCP    17m</span><br></pre></td></tr></table></figure></p><p>在master节点执行命令展示LB的效果，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line">[root@master ~]# curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br><span class="line">[root@master ~]# curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br><span class="line">[root@master ~]# curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-6tqkk</span><br><span class="line">[root@master ~]# curl 10.100.210.72</span><br><span class="line">V1</span><br><span class="line">myapp-799bbcd6b4-p4dxz</span><br></pre></td></tr></table></figure></p><p>可以看到访问服务地址10.100.210.72后，分别均匀的访问到2个pod上的httpd服务</p><p>以上是体验kubernetes LB(Load Balancing)负载均衡集群整个过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。&lt;/p&gt;
&lt;p&gt;上一篇文章介绍了kubernetes 13.3.4 安装过程，这一篇文件带你来5分钟带你体验kubernetes LB(Load Balancing)负载均衡集群&lt;/p&gt;
&lt;h3 id=&quot;环境
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://28code.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://28code.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://28code.com/tags/kubernetes/"/>
    
      <category term="k8s" scheme="http://28code.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 1.13.4 安装过程</title>
    <link href="http://28code.com/2019/03/01/kubernetes_install/"/>
    <id>http://28code.com/2019/03/01/kubernetes_install/</id>
    <published>2019-03-01T03:20:20.000Z</published>
    <updated>2019-03-01T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。</p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>今天我们要搭建一个kubernetes环境，主要使用kubeadm工具来搭建。</p><h3 id="2-kubeadm简介"><a href="#2-kubeadm简介" class="headerlink" title="2.kubeadm简介"></a>2.kubeadm简介</h3><p>kubeadm是Kubernetes官方提供的用于快速安装Kubernetes集群的工具。<br><strong><a href="https://github.com/kubernetes/kubernetes/releases" title="Kubernetes发布的版本" target="_blank" rel="noopener">点击查看Kubernetes发布的版本</a></strong></p><h3 id="3-操作系统准备"><a href="#3-操作系统准备" class="headerlink" title="3.操作系统准备"></a>3.操作系统准备</h3><h4 id="3-1-硬件环境"><a href="#3-1-硬件环境" class="headerlink" title="3.1. 硬件环境"></a>3.1. 硬件环境</h4><p>我们使用VM虚拟机来安装一个master节点两个node节点。<br>虚拟机安装CentOS Linux7.6 配置如下：<br>内存：1G  （测试1G没问题）<br>CPU：2个 （必须大于等于2）<br>磁盘：20G</p><h4 id="3-2-系统环境"><a href="#3-2-系统环境" class="headerlink" title="3.2. 系统环境"></a>3.2. 系统环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/redhat-release</span><br><span class="line">Red Hat Enterprise Linux Server release 7.6 (Maipo)</span><br><span class="line"># uname -r</span><br><span class="line">3.10.0-957.el7.x86_64 （内核必须是3.10及以上）</span><br></pre></td></tr></table></figure><h3 id="4-安装步骤"><a href="#4-安装步骤" class="headerlink" title="4.安装步骤"></a>4.安装步骤</h3><h4 id="4-1-网络同步时间确保集群内时钟同步"><a href="#4-1-网络同步时间确保集群内时钟同步" class="headerlink" title="4.1. 网络同步时间确保集群内时钟同步"></a>4.1. 网络同步时间确保集群内时钟同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start chronyd.service</span><br><span class="line"># systemctl enable chronyd.service</span><br><span class="line"># systemctl status chronyd</span><br><span class="line"># systemctl restart chronyd</span><br></pre></td></tr></table></figure><h4 id="4-2-主机名称解析"><a href="#4-2-主机名称解析" class="headerlink" title="4.2. 主机名称解析"></a>4.2. 主机名称解析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># echo &apos;127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4&apos; &gt; /etc/hosts </span><br><span class="line"># echo &apos;::1         localhost localhost.localdomain localhost6 localhost6.localdomain6&apos; &gt;&gt; /etc/hosts </span><br><span class="line"># echo &apos;192.168.110.140 master.k8s.com master&apos; &gt;&gt; /etc/hosts</span><br><span class="line"># echo &apos;192.168.110.141 node01.k8s.com node01&apos; &gt;&gt; /etc/hosts</span><br><span class="line"># echo &apos;192.168.110.142 node02.k8s.com node02&apos; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="4-3-关闭iptables"><a href="#4-3-关闭iptables" class="headerlink" title="4.3. 关闭iptables"></a>4.3. 关闭iptables</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl status iptables</span><br></pre></td></tr></table></figure><h4 id="4-4-关闭防火墙："><a href="#4-4-关闭防火墙：" class="headerlink" title="4.4. 关闭防火墙："></a>4.4. 关闭防火墙：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl status firewalld</span><br></pre></td></tr></table></figure><h4 id="4-5-关闭selinux"><a href="#4-5-关闭selinux" class="headerlink" title="4.5. 关闭selinux"></a>4.5. 关闭selinux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># getenforce</span><br></pre></td></tr></table></figure><p>编辑  /etc/selinux/config  文件<br>设置 SELINUX=disabled</p><h4 id="4-6-关闭-swap-也可以不关闭，需要在后续改配置文件"><a href="#4-6-关闭-swap-也可以不关闭，需要在后续改配置文件" class="headerlink" title="4.6. 关闭 swap(也可以不关闭，需要在后续改配置文件)"></a>4.6. 关闭 swap(也可以不关闭，需要在后续改配置文件)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># free -m</span><br><span class="line"># swapoff -a</span><br></pre></td></tr></table></figure><p>编辑  /etc/fstab 文件 下注释掉所有swap</p><h4 id="4-7-检查net-bridge设置"><a href="#4-7-检查net-bridge设置" class="headerlink" title="4.7. 检查net.bridge设置"></a>4.7. 检查net.bridge设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># sysctl -a | grep bridge</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-filter-pppoe-tagged = 0</span><br><span class="line">net.bridge.bridge-nf-filter-vlan-tagged = 0</span><br><span class="line">net.bridge.bridge-nf-pass-vlan-input-dev = 0</span><br><span class="line">sysctl: reading key &quot;net.ipv6.conf.all.stable_secret&quot;</span><br><span class="line">sysctl: reading key &quot;net.ipv6.conf.default.stable_secret&quot;</span><br><span class="line">sysctl: reading key &quot;net.ipv6.conf.docker0.stable_secret&quot;</span><br><span class="line">sysctl: reading key &quot;net.ipv6.conf.ens33.stable_secret&quot;</span><br><span class="line">sysctl: reading key &quot;net.ipv6.conf.lo.stable_secret&quot;</span><br></pre></td></tr></table></figure><p>检查<br>net.bridge.bridge-nf-call-arptables = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>是否为1</p><p>如果不是1<br>修改方式：修改 /etc/sysctl.conf 文件<br>或者新建 /etc/sysctl.d/k8s.conf 增加<br>net.bridge.bridge-nf-call-arptables = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>让文件生效<br>sysctl -p /etc/sysctl.d/k8s.conf</p><h4 id="4-8-yum仓库准备"><a href="#4-8-yum仓库准备" class="headerlink" title="4.8. yum仓库准备"></a>4.8. yum仓库准备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CentOS-Base的yum仓库</span><br><span class="line"># cd /etc/yum.repos.d</span><br><span class="line"># mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class="line"># curl -o CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"># sed -i &apos;s/gpgcheck=1/gpgcheck=0/g&apos; /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"></span><br><span class="line">docker-ce的yum仓库</span><br><span class="line"># curl -o docker-ce.repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">kubernetes的yum仓库</span><br><span class="line"># cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg  https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">enable=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># update cache</span><br><span class="line">yum clean all  </span><br><span class="line">yum makecache  </span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure><h4 id="4-8-安装Docker"><a href="#4-8-安装Docker" class="headerlink" title="4.8. 安装Docker"></a>4.8. 安装Docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">安装docker（默认安装最新版本，也可以安装指定版本）</span><br><span class="line"># yum -y install docker-ce</span><br><span class="line">启动docker</span><br><span class="line"># systemctl start docker</span><br><span class="line">开机启动docker</span><br><span class="line"># systemctl enable docker</span><br><span class="line">查看docker信息</span><br><span class="line"># docker info</span><br></pre></td></tr></table></figure><h4 id="4-9-安装kubeadm和kubelet和kubectl"><a href="#4-9-安装kubeadm和kubelet和kubectl" class="headerlink" title="4.9. 安装kubeadm和kubelet和kubectl"></a>4.9. 安装kubeadm和kubelet和kubectl</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装kubelet kubeadm kubectl（默认安装最新版本，目前版本是1.13.4）</span><br><span class="line"># yum install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h4 id="4-10-没有关闭swap需要修改参数"><a href="#4-10-没有关闭swap需要修改参数" class="headerlink" title="4.10. 没有关闭swap需要修改参数"></a>4.10. 没有关闭swap需要修改参数</h4><p>swap启动的时候 设置防止报错<br>修改 /etc/sysconfig/kubelet 文件<br>KUBELET_EXTRA_ARGS=”–fail-swap-on=false”</p><h4 id="4-11-安装网络插件（flannel或calico）"><a href="#4-11-安装网络插件（flannel或calico）" class="headerlink" title="4.11. 安装网络插件（flannel或calico）"></a>4.11. 安装网络插件（flannel或calico）</h4><p>这里我选择安装flannel<br>flannel 默认的设置是:10.244.0.0/16<br>flannel安装方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行以下语句</span><br><span class="line"># kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure></p><p><strong><a href="https://github.com/kubernetes/kubernetes/releases" title="点击查看flannel的相关信息" target="_blank" rel="noopener">点击查看flannel的相关信息</a></strong></p><hr><p>以上是安装好了一个虚拟机，我们需要把虚拟机复制2份，总共3个虚拟机。<br>设置3个虚拟机的主机名和ip分别为(可根据实际自行设定)</p><table><thead><tr><th>主机名</th><th>ip</th></tr></thead><tbody><tr><td>master</td><td>192.168.110.140</td></tr><tr><td>node01</td><td>192.168.110.141</td></tr><tr><td>node02</td><td>192.168.110.142</td></tr></tbody></table><hr><h3 id="5-镜像准备"><a href="#5-镜像准备" class="headerlink" title="5.镜像准备"></a>5.镜像准备</h3><p> 查看master 节点上需要的镜像文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#  kubeadm config images list</span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.13.4</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.13.4</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.13.4</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.13.4</span><br><span class="line">k8s.gcr.io/pause:3.1</span><br><span class="line">k8s.gcr.io/etcd:3.2.24</span><br><span class="line">k8s.gcr.io/coredns:1.2.6</span><br></pre></td></tr></table></figure></p><p>为了解决国内普遍访问不到k8s.gcr.io的问题，我们从mirrorgooglecontainers下载image，然后打个tag来绕过网络限制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker pull mirrorgooglecontainers/kube-apiserver:v1.13.4</span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager:v1.13.4</span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler:v1.13.4</span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy:v1.13.4</span><br><span class="line">docker pull mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker pull mirrorgooglecontainers/etcd:3.2.24</span><br><span class="line">docker pull mirrorgooglecontainers/coredns:1.2.6</span><br><span class="line"></span><br><span class="line">docker tag mirrorgooglecontainers/kube-apiserver:v1.13.4 k8s.gcr.io/kube-apiserver:v1.13.4</span><br><span class="line">docker tag mirrorgooglecontainers/kube-controller-manager:v1.13.4 k8s.gcr.io/kube-controller-manager:v1.13.4</span><br><span class="line">docker tag mirrorgooglecontainers/kube-scheduler:v1.13.4 k8s.gcr.io/kube-scheduler:v1.13.4</span><br><span class="line">docker tag mirrorgooglecontainers/kube-proxy:v1.13.4 k8s.gcr.io/kube-proxy:v1.13.4</span><br><span class="line">docker tag mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag mirrorgooglecontainers/etcd:3.2.24 k8s.gcr.io/etcd:3.2.24</span><br><span class="line">docker tag mirrorgooglecontainers/coredns:1.2.6 k8s.gcr.io/coredns:1.2.6</span><br></pre></td></tr></table></figure><h3 id="6-kubernetes-master初始化"><a href="#6-kubernetes-master初始化" class="headerlink" title="6. kubernetes master初始化"></a>6. kubernetes master初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看kubeadm版本</span><br><span class="line"># rpm -q kubeadm</span><br><span class="line">kubeadm-1.13.4-0.x86_64</span><br><span class="line"></span><br><span class="line">执行命令初始化master</span><br><span class="line"># kubeadm init --kubernetes-version=&quot;1.13.4&quot; --pod-network-cidr=&quot;10.244.0.0/16&quot;   --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure><p>初始化信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">[init] Using Kubernetes version: v1.13.4</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING Swap]: running with swap on is not supported. Please disable swap</span><br><span class="line">[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.09.2. Latest validated version: 18.06</span><br><span class="line">[WARNING Service-Kubelet]: kubelet service is not enabled, please run &apos;systemctl enable kubelet.service&apos;</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class="line">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/server&quot; certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed for DNS names [master.k8s.com localhost] and IPs [192.168.110.140 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/peer&quot; certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed for DNS names [master.k8s.com localhost] and IPs [192.168.110.140 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [master.k8s.com kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.110.140]</span><br><span class="line">[certs] Generating &quot;sa&quot; key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;</span><br><span class="line">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class="line">[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 24.503251 seconds</span><br><span class="line">[uploadconfig] storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.13&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[patchnode] Uploading the CRI Socket information &quot;/var/run/dockershim.sock&quot; to the Node API object &quot;master.k8s.com&quot; as an annotation</span><br><span class="line">[mark-control-plane] Marking the node master.k8s.com as control-plane by adding the label &quot;node-role.kubernetes.io/master=&apos;&apos;&quot;</span><br><span class="line">[mark-control-plane] Marking the node master.k8s.com as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: 0me0lv.xn1vhr6ub80qexyu</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstraptoken] creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join 192.168.110.140:6443 --token 0me0lv.xn1vhr6ub80qexyu --discovery-token-ca-cert-hash sha256:700e4cb4ce01c0be5a40e8278ebf531847090b53d53b115ca3031bfb25532b0b</span><br></pre></td></tr></table></figure></p><p>根据提示在master节点下执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p $HOME/.kube</span><br><span class="line"># sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line"># sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></p><h3 id="7-kubernetes-node01加入集群"><a href="#7-kubernetes-node01加入集群" class="headerlink" title="7. kubernetes node01加入集群"></a>7. kubernetes node01加入集群</h3><p>node01执行以下命令加入集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#kubeadm join 192.168.110.140:6443 --token 0me0lv.xn1vhr6ub80qexyu --discovery-token-ca-cert-hash sha256:700e4cb4ce01c0be5a40e8278ebf531847090b53d53b115ca3031bfb25532b0b  --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure></p><p>执行命令后提示信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING Swap]: running with swap on is not supported. Please disable swap</span><br><span class="line">[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.09.2. Latest validated version: 18.06</span><br><span class="line">[WARNING Service-Kubelet]: kubelet service is not enabled, please run &apos;systemctl enable kubelet.service&apos;</span><br><span class="line">[discovery] Trying to connect to API Server &quot;192.168.110.140:6443&quot;</span><br><span class="line">[discovery] Created cluster-info discovery client, requesting info from &quot;https://192.168.110.140:6443&quot;</span><br><span class="line">[discovery] Requesting info from &quot;https://192.168.110.140:6443&quot; again to validate TLS against the pinned public key</span><br><span class="line">[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server &quot;192.168.110.140:6443&quot;</span><br><span class="line">[discovery] Successfully established connection with API Server &quot;192.168.110.140:6443&quot;</span><br><span class="line">[join] Reading configuration from the cluster...</span><br><span class="line">[join] FYI: You can look at this config file with &apos;kubectl -n kube-system get cm kubeadm-config -oyaml&apos;</span><br><span class="line">[kubelet] Downloading configuration for the kubelet from the &quot;kubelet-config-1.13&quot; ConfigMap in the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[tlsbootstrap] Waiting for the kubelet to perform the TLS Bootstrap...</span><br><span class="line">[patchnode] Uploading the CRI Socket information &quot;/var/run/dockershim.sock&quot; to the Node API object &quot;node01.k8s.com&quot; as an annotation</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run &apos;kubectl get nodes&apos; on the master to see this node join the cluster.</span><br></pre></td></tr></table></figure></p><h3 id="8-kubernetes-node02加入集群"><a href="#8-kubernetes-node02加入集群" class="headerlink" title="8. kubernetes node02加入集群"></a>8. kubernetes node02加入集群</h3><p>node02执行以下命令加入集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#kubeadm join 192.168.110.140:6443 --token 0me0lv.xn1vhr6ub80qexyu --discovery-token-ca-cert-hash sha256:700e4cb4ce01c0be5a40e8278ebf531847090b53d53b115ca3031bfb25532b0b  --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure></p><hr><p>以上是配置好了kubernetes 一个master节点和两个node节点</p><h3 id="9-验证集群状态"><a href="#9-验证集群状态" class="headerlink" title="9. 验证集群状态"></a>9. 验证集群状态</h3><p>分别在3个节点上执行命令启动kubelet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># system start kubelet</span><br></pre></td></tr></table></figure></p><p>在master节点上执行命令查看集群节点状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get nodes</span><br><span class="line">得到以下信息</span><br><span class="line">NAME             STATUS   ROLES    AGE     VERSION</span><br><span class="line">master.k8s.com   Ready    master   18m     v1.13.4</span><br><span class="line">node01.k8s.com   Ready    &lt;none&gt;   11m     v1.13.4</span><br><span class="line">node02.k8s.com   Ready    &lt;none&gt;   9m39s   v1.13.4</span><br></pre></td></tr></table></figure></p><p>在master节点上执行命令查看系统pod运行状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pods -n kube-system</span><br><span class="line">得到以下信息</span><br><span class="line">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-86c58d9df4-467w8                 1/1     Running   0          23m</span><br><span class="line">coredns-86c58d9df4-qrjx2                 1/1     Running   0          23m</span><br><span class="line">etcd-master.k8s.com                      1/1     Running   0          22m</span><br><span class="line">kube-apiserver-master.k8s.com            1/1     Running   0          22m</span><br><span class="line">kube-controller-manager-master.k8s.com   1/1     Running   0          22m</span><br><span class="line">kube-flannel-ds-amd64-4hx5q              1/1     Running   0          5m1s</span><br><span class="line">kube-flannel-ds-amd64-nhbqs              1/1     Running   0          5m1s</span><br><span class="line">kube-flannel-ds-amd64-pf5dg              1/1     Running   0          5m1s</span><br><span class="line">kube-proxy-g85lj                         1/1     Running   0          14m</span><br><span class="line">kube-proxy-kb9l7                         1/1     Running   0          23m</span><br><span class="line">kube-proxy-nczpr                         1/1     Running   0          16m</span><br><span class="line">kube-scheduler-master.k8s.com            1/1     Running   0          22m</span><br></pre></td></tr></table></figure></p><h3 id="9-错误排查"><a href="#9-错误排查" class="headerlink" title="9. 错误排查"></a>9. 错误排查</h3><p>在master节点上执行命令得到如下状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get nodes</span><br><span class="line">NAME             STATUS     ROLES    AGE     VERSION</span><br><span class="line">master.k8s.com   NotReady   master   15m     v1.13.4</span><br><span class="line">node01.k8s.com   NotReady   &lt;none&gt;   8m6s    v1.13.4</span><br><span class="line">node02.k8s.com   NotReady   &lt;none&gt;   6m31s   v1.13.4</span><br><span class="line"></span><br><span class="line"># kubectl get pods -n kube-system</span><br><span class="line">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-86c58d9df4-467w8                 0/1     Pending   0          17m</span><br><span class="line">coredns-86c58d9df4-qrjx2                 0/1     Pending   0          17m</span><br><span class="line">etcd-master.k8s.com                      1/1     Running   0          16m</span><br><span class="line">kube-apiserver-master.k8s.com            1/1     Running   0          16m</span><br><span class="line">kube-controller-manager-master.k8s.com   1/1     Running   0          16m</span><br><span class="line">kube-proxy-g85lj                         1/1     Running   0          8m19s</span><br><span class="line">kube-proxy-kb9l7                         1/1     Running   0          17m</span><br><span class="line">kube-proxy-nczpr                         1/1     Running   0          9m54s</span><br><span class="line">kube-scheduler-master.k8s.com            1/1     Running   0          16m</span><br></pre></td></tr></table></figure></p><p>以上说明网络没有配置好，需要我们安装网络，此时参考 4.11. 安装网络插件（flannel或calico）<br>执行命令安装flannel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure></p><p>执行命令后再次验证节点和pod状态</p><p>以上完整安装kubernetes 13.3.4 整个过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者声明：本篇文章系本人依照真实部署过程原创，未经许可，谢绝转载。&lt;/p&gt;
&lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;p&gt;今天我们要搭建一个kubernetes环境
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://28code.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://28code.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://28code.com/tags/kubernetes/"/>
    
      <category term="k8s" scheme="http://28code.com/tags/k8s/"/>
    
  </entry>
  
</feed>
